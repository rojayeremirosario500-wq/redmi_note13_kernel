[Immersive content redacted for brevity.]
    - name: Definir Entorno y Preparar Toolchain
      run: |
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-android-
        # 1. Crear un enlace simbolico para que 'make' encuentre el compilador por su nombre clasico
        ln -s $(pwd)/toolchain/aarch64-linux-android/bin/clang $(pwd)/toolchain/aarch64-linux-android/bin/aarch64-linux-android-gcc
        
        # 2. AÃ±ade la Toolchain a PATH para que se reconozca globalmente
        export PATH=$(pwd)/toolchain/aarch64-linux-android/bin:$PATH
        
    # --- PASO CRITICO: USAR EL BUILDER DEL CREADOR ---
    - name: Integrar y Ejecutar Builder de Topnotchfreaks
      run: |
        # 1. Clonar el repositorio del builder a una carpeta temporal
        git clone https://github.com/topnotchfreaks/kernel-msm-5.15 builder_scripts
        
        # 2. Copiar los scripts de compilacion necesarios a la raiz de tu repo (donde estan los archivos del kernel)
        cp builder_scripts/build.sh .
        cp builder_scripts/build-config.sh .
        
        # 3. Dar permisos de ejecucion
        chmod +x build.sh
        
        # 4. EJECUTAR EL SCRIPT DE COMPILACION
        # El script necesita el nombre del defconfig como argumento.
        echo "Ejecutando build.sh con msm_defconfig..."
        bash ./build.sh msm_defconfig
        
        # El script del creador deberia generar la salida en una carpeta con formato especifico.
        
    - name: Empaquetar y Subir Archivos de Salida
      uses: actions/upload-artifact@v4
      with:
        name: Kernel_ZEPHYR_Compilado
        # Buscamos la salida generada por el script 'build.sh' (es una suposicion, si falla, cambiamos la ruta)
        path: out/arch/arm64/boot/*
        if-no-files-found: warn
